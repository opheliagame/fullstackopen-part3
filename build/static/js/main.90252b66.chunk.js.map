{"version":3,"sources":["components/Persons.js","components/PersonForm.js","components/Filter.js","components/Notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Persons","persons","filter","deletePerson","person","name","toLowerCase","includes","map","id","key","phone","onClick","event","PersonForm","props","onSubmit","addPerson","value","newName","onChange","handleNameChange","newPhone","handlePhoneChange","type","Filter","handleFilterChange","Notification","message","styles","fontSize","border","background","borderRadius","error","color","style","className","text","baseUrl","axios","get","then","response","data","newObject","post","put","delete","App","useState","setPersons","setNewName","setNewPhone","setFilter","setMessage","useEffect","personService","console","log","target","preventDefault","some","p","window","confirm","existingPerson","find","updatedPerson","setTimeout","catch","newPerson","concat","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.90252b66.chunk.js","sourcesContent":["import React from 'react';\n\nconst Persons = ({persons, filter, deletePerson}) => {\n    return (\n        <>\n        {persons\n        .filter(person => person.name.toLowerCase().includes(filter.toLowerCase()))\n        .map((person, id) =>\n            <div key={id}>\n            <p key={id}>{person.name} {person.phone}</p>  \n            <button \n                onClick={(event) => deletePerson(event, person.id, person.name)}>\n                delete\n            </button>\n            </div>\n        )}\n        </>\n    )\n}\n\nexport default Persons","import React from 'react';\n\nconst PersonForm = (props) => {\n    return (\n        <>\n        <form onSubmit={props.addPerson}>\n            <div>\n            name: <input value={props.newName} onChange={props.handleNameChange}/>\n            </div>\n            <div>\n            number: <input value={props.newPhone} onChange={props.handlePhoneChange}/>\n            </div>\n            <div>\n            <button type='submit'>add</button>\n            </div>\n        </form>\n        </>\n    )\n}\n\nexport default PersonForm","import React from 'react';\n\nconst Filter = ({filter, handleFilterChange}) => {\n    return (\n        <>\n        filter shown with <input value={filter} onChange={handleFilterChange}/>\n        </>\n    )\n}\n\nexport default Filter","import React from 'react';\n\nconst Notification = ({ message }) => {\n    const styles = {\n        fontSize: 16,\n        border: '3px solid white',\n        background: 'lightgrey',\n        borderRadius: 5\n    }\n\n    if(message === null) { \n       return null\n    }\n    else {\n        if(message.error === true) {\n            styles.color = 'red'\n            styles.border = '3px solid red'\n        }\n        else {\n            styles.color = 'green'\n            styles.border = '3px solid green'\n        }\n    }\n\n    return (\n        <div style={styles} className='notification'>\n            <br />\n            <p>{message.text}</p>\n        </div>\n    )\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst deletePerson = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update , deletePerson }","import React, { useState, useEffect } from 'react';\nimport Persons from './components/Persons';\nimport PersonForm from './components/PersonForm';\nimport Filter from './components/Filter';\nimport Notification from './components/Notification';\nimport personService from './services/persons'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newPhone, setNewPhone ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ message, setMessage ] = useState(null)\n  \n  const handleFilterChange = (event) => {\n    setFilter(event.target.value)\n  }\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n  const handlePhoneChange = (event) => {\n    setNewPhone(event.target.value)\n  }\n  const addPerson = (event) => {\n    event.preventDefault()\n\n    //check if person already in phonebook\n    if(persons.some(p => p.name === newName)) {\n      if(window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        const existingPerson = persons.find(person => person.name === newName)\n        const updatedPerson = {\n          ...existingPerson,\n          phone: newPhone\n        }\n        personService\n          .update(existingPerson.id, updatedPerson)\n          .then(updatedPerson => {\n            setPersons(persons.map(person => \n              person.id !== existingPerson.id ? person : updatedPerson\n            ))\n            setNewName('')\n            setNewPhone('')\n            setMessage({\n              text: `Updated ${updatedPerson.name}`,\n              error: false})\n            setTimeout(() => {\n              setMessage(null)\n            }, 3000)\n          })        \n          .catch(response => {\n            setMessage({\n              text: `Information of ${newName} has already been removed from server`,\n              error: true\n            })\n          })\n      }\n    }\n    else {\n      const newPerson = {\n        name: newName,\n        phone: newPhone\n      }\n\n      personService\n        .create(newPerson)\n        .then(newPerson => {\n          setPersons(persons.concat(newPerson))\n          setNewName('')\n          setNewPhone('')\n          setMessage({\n            text: `Added ${newPerson.name}`,\n            error: false \n          })\n          setTimeout(() => {\n            setMessage(null)\n          }, 3000)\n        })\n        .catch(error => {\n          setMessage(error.response.data)\n        })\n    }\n  }\n  const deletePerson = (event, id, name) => {\n    event.preventDefault()\n    if(window.confirm(`Delete ${name}?`)) {\n      personService\n        .deletePerson(id)\n        .then(response => {\n          setPersons(persons.filter(p => p.id !== id))\n        })\n        \n    }\n    \n  }\n\n  const hook = () => {\n    personService\n      .getAll()\n      .then(persons => {\n        console.log('promise fulfilled')\n        setPersons(persons)\n      })\n  }\n  useEffect(hook, [])\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} />\n      <Filter filter={filter} handleFilterChange={handleFilterChange} />\n      <h2>add a new</h2>\n      <PersonForm \n        addPerson={addPerson}\n        newName={newName}\n        newPhone={newPhone}\n        handleNameChange={handleNameChange}\n        handlePhoneChange={handlePhoneChange}\n      />\n      <h2>Numbers</h2>\n      <Persons\n        persons={persons} \n        filter={filter}\n        deletePerson={deletePerson}/>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}